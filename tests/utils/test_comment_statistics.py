import pytest
from tests.fixtures import polis_convo_data
from tests.helpers import get_grouped_statement_ids
from pandas._testing import assert_dict_equal

from reddwarf.utils import stats, polismath, matrix, statements as stmnts
from reddwarf.data_loader import Loader
from reddwarf.types.polis import PolisRepness

def setup_test(fixture):
    loader = Loader(filepaths=[
        f'{fixture.data_dir}/votes.json',
        f'{fixture.data_dir}/comments.json',
        f'{fixture.data_dir}/conversation.json',
    ])
    VOTES = loader.votes_data

    raw_vote_matrix = matrix.generate_raw_matrix(votes=VOTES)
    # We don't actuall need this outside PCA?
    # STATEMENTS = loader.comments_data
    # _, _, mod_out, _ = stmnts.process_statements(statement_data=STATEMENTS)
    # filtered_vote_matrix = matrix.simple_filter_matrix(
    #     vote_matrix=raw_vote_matrix,
    #     mod_out_statement_ids=mod_out,
    # )

    # Get list of all active participant ids, since Polis has some edge-cases
    # that keep specific participants, and we need to keep them from being filtered out.
    all_clustered_participant_ids, cluster_labels = polismath.extract_data_from_polismath(fixture.math_data)

    # Generate stats all groups and all statements.
    grouped_stats_df, gac_df = stats.calculate_comment_statistics_dataframes(
        vote_matrix=raw_vote_matrix.loc[all_clustered_participant_ids, :],
        cluster_labels=cluster_labels,
    )

    return grouped_stats_df, gac_df

# TODO: Investigate why "small-with-meta" and "medium-with-meta" won't pass.
@pytest.mark.parametrize("polis_convo_data", ["small-no-meta", "medium-no-meta"], indirect=True)
def test_select_representative_statements_real_data(polis_convo_data):
    fixture = polis_convo_data
    grouped_stats_df, _ = setup_test(fixture)

    polis_repness = stats.select_representative_statements(grouped_stats_df=grouped_stats_df, pick_max=5)

    actual_repness: PolisRepness = polis_repness
    expected_repness: PolisRepness = fixture.math_data["repness"]
    # Compare the selected statements calculated from those generated by polismath.
    assert get_grouped_statement_ids(actual_repness) == get_grouped_statement_ids(expected_repness)

# TODO: Investigate why "medium-with-meta" won't pass.
@pytest.mark.parametrize("polis_convo_data", ["small-no-meta", "small-with-meta", "medium-no-meta"], indirect=True)
def test_calculate_comment_statistics_dataframes_grouped_stats_df_real_data(polis_convo_data):
    fixture = polis_convo_data
    grouped_stats_df, _ = setup_test(fixture)

    # Cycle through all the expected data calculated by Polis platform
    for group_id, statements in fixture.math_data['repness'].items():
        group_id = int(group_id)
        for st in statements:
            expected_repr = st["repness"]
            expected_repr_test = st["repness-test"]
            expected_prob = st["p-success"]
            expected_prob_test = st["p-test"]

            # Fetch matching calculated values for comparison.
            keys = ["prob", "prob_test", "repness", "repness_test"]
            if st["repful-for"] == "agree":
                key_map = dict(zip(keys, ["pa", "pat", "ra", "rat"]))
            else: # disagree
                key_map = dict(zip(keys, ["pd", "pdt", "rd", "rdt"]))

            actual = {
                k: grouped_stats_df[group_id].loc[st["tid"], v]
                for k,v in key_map.items()
            }

            assert actual["prob"] == pytest.approx(expected_prob)
            assert actual["prob_test"] == pytest.approx(expected_prob_test)
            assert actual["repness"] == pytest.approx(expected_repr)
            assert actual["repness_test"] == pytest.approx(expected_repr_test)


# TODO: Investigate why "medium-with-meta" won't pass.
@pytest.mark.parametrize("polis_convo_data", ["small-no-meta", "small-with-meta", "medium-no-meta"], indirect=True)
def test_calculate_comment_statistics_dataframes_gac_df_real_data(polis_convo_data):
    fixture = polis_convo_data
    _, gac_df = setup_test(fixture)

    calculated_gac = {
        str(pid): float(row["consensus"])
        for pid, row in gac_df.iterrows()
    }
    expected_gac = fixture.math_data["group-aware-consensus"]
    assert_dict_equal(calculated_gac, expected_gac)