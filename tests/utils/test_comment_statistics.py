import pytest
from tests.fixtures import polis_convo_data
from tests.helpers import get_grouped_statement_ids

from reddwarf.utils import stats, polismath, matrix, statements as stmnts
from reddwarf.data_loader import Loader
from reddwarf.types.polis import PolisRepness


# TODO: Investigate why "medium-with-meta" won't pass.
@pytest.mark.parametrize("polis_convo_data", ["small-no-meta", "small-with-meta", "medium-no-meta"], indirect=True)
def test_calculate_representativeness_real_data(polis_convo_data):
    math_data, path, _ = polis_convo_data
    loader = Loader(filepaths=[
        f'{path}/votes.json',
        f'{path}/comments.json',
        f'{path}/conversation.json',
    ])
    VOTES = loader.votes_data
    STATEMENTS = loader.comments_data

    _, _, mod_out, _ = stmnts.process_statements(statement_data=STATEMENTS)

    vote_matrix = matrix.generate_raw_matrix(votes=VOTES)
    vote_matrix = matrix.simple_filter_matrix(
        vote_matrix=vote_matrix,
        mod_out_statement_ids=mod_out,
    )

    # Get list of all active participant ids, since Polis has some edge-cases
    # that keep specific participants, and we need to keep them from being filtered out.
    all_clustered_participant_ids, cluster_labels = polismath.extract_data_from_polismath(math_data)
    vote_matrix = vote_matrix.loc[all_clustered_participant_ids, :]

    # Generate stats all groups and all statements.
    grouped_stats_df, gac_df = stats.calculate_comment_statistics_dataframes(
        vote_matrix=vote_matrix,
        cluster_labels=cluster_labels,
    )

    polis_repness = stats.select_representative_statements(grouped_stats_df=grouped_stats_df)

    actual_repness: PolisRepness = polis_repness # type:ignore
    expected_repness: PolisRepness = math_data["repness"] # type:ignore
    # Compare the selected statements calculated from those generated by polismath.
    assert get_grouped_statement_ids(actual_repness) == get_grouped_statement_ids(expected_repness)

    # Cycle through all the expected data calculated by Polis platform
    for group_id, statements in math_data['repness'].items():
        group_id = int(group_id)
        for st in statements:
            expected_repr = st["repness"]
            expected_repr_test = st["repness-test"]
            expected_prob = st["p-success"]
            expected_prob_test = st["p-test"]

            # Fetch matching calculated values for comparison.
            keys = ["prob", "prob_test", "repness", "repness_test"]
            if st["repful-for"] == "agree":
                key_map = dict(zip(keys, ["pa", "pat", "ra", "rat"]))
            else: # disagree
                key_map = dict(zip(keys, ["pd", "pdt", "rd", "rdt"]))

            actual = {
                k: grouped_stats_df[group_id].loc[st["tid"], v]
                for k,v in key_map.items()
            }

            assert actual["prob"] == pytest.approx(expected_prob)
            assert actual["prob_test"] == pytest.approx(expected_prob_test)
            assert actual["repness"] == pytest.approx(expected_repr)
            assert actual["repness_test"] == pytest.approx(expected_repr_test)
